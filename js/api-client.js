// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è W Garage
class WGarageAPI {
    constructor() {
        this.baseURL = window.location.protocol + '//' + window.location.host + '/api';
        this.token = localStorage.getItem('wgarage-token');
        this.socket = null;
        this.isOnline = navigator.onLine;
        
        this.setupOnlineDetection();
        this.initSocket();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
    setupOnlineDetection() {
        window.addEventListener('online', () => {
            this.isOnline = true;
            this.syncOfflineData();
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
    initSocket() {
        if (this.socket) return;
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        const user = this.getCurrentUser();
        if (!user) return;
        
        this.socket = io(window.location.origin);
        
        this.socket.on('connect', () => {
            console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
            this.socket.emit('userConnect', user.id || user.username);
        });

        this.socket.on('disconnect', () => {
            console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.socket.on('newTask', (data) => {
            console.log('üìã –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ:', data);
            this.showNotification('–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞', `–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${data.title}`, 'info');
        });

        // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.socket.on('personalTask', (data) => {
            console.log('üéØ –ü–æ–ª—É—á–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞:', data);
            this.showNotification('–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞!', `${data.title}`, 'success');
            this.updateTaskList();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.realTimeNotifications) {
                window.realTimeNotifications.showToast(
                    'üéØ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤–∞–º!', 
                    `${data.title}${data.deadline ? ` (–î–µ–¥–ª–∞–π–Ω: ${new Date(data.deadline).toLocaleDateString()})` : ''}`, 
                    'success',
                    [{
                        text: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏',
                        action: () => {
                            if (window.location.pathname !== '/dashboard') {
                                window.location.href = '/dashboard';
                            } else {
                                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∑–∞–¥–∞—á –µ—Å–ª–∏ —É–∂–µ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
                                const tasksTab = document.querySelector('[data-page="tasks"]');
                                if (tasksTab) tasksTab.click();
                            }
                        }
                    }]
                );
            }
        });

        this.socket.on('taskUpdate', (data) => {
            this.showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏', `–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${data.title}" –∏–∑–º–µ–Ω–µ–Ω`, 'info');
            this.updateTaskList();
        });

        this.socket.on('newComment', (data) => {
            this.showNotification('–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ "${data.title}"`, 'info');
        });

        this.socket.on('taskUpdate', (data) => {
            this.showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏', `–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${data.title}" –∏–∑–º–µ–Ω–µ–Ω`, 'info');
            this.updateTaskList();
        });

        this.socket.on('newComment', (data) => {
            this.showNotification('–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ "${data.title}"`, 'info');
        });
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                ...(this.token && { 'Authorization': `Bearer ${this.token}` })
            }
        };

        const requestOptions = {
            ...defaultOptions,
            ...options,
            headers: {
                ...defaultOptions.headers,
                ...options.headers
            }
        };

        try {
            const response = await fetch(url, requestOptions);
            const data = await response.json();

            if (!response.ok) {
                if (response.status === 401) {
                    this.logout();
                    throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ');
                }
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
            }

            return data;
        } catch (error) {
            if (!this.isOnline) {
                return this.handleOfflineRequest(endpoint, options);
            }
            throw error;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å–æ–≤
    handleOfflineRequest(endpoint, options) {
        const offlineData = JSON.parse(localStorage.getItem('wgarage-offline-data') || '[]');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (options.method === 'POST' || options.method === 'PUT') {
            offlineData.push({
                endpoint,
                options,
                timestamp: Date.now()
            });
            localStorage.setItem('wgarage-offline-data', JSON.stringify(offlineData));
        }

        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.');
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω –¥–∞–Ω–Ω—ã—Ö
    async syncOfflineData() {
        const offlineData = JSON.parse(localStorage.getItem('wgarage-offline-data') || '[]');
        
        if (offlineData.length === 0) return;

        for (const request of offlineData) {
            try {
                await this.request(request.endpoint, request.options);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            }
        }

        localStorage.removeItem('wgarage-offline-data');
        this.showNotification('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è', '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    async login(username, password) {
        try {
            const response = await this.request('/auth/login', {
                method: 'POST',
                body: JSON.stringify({ username, password })
            });

            if (response.success) {
                this.token = response.token;
                localStorage.setItem('wgarage-token', this.token);
                localStorage.setItem('wgarage-current-user', JSON.stringify(response.user));
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ WebSocket –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                this.initSocket();
                if (this.socket) {
                    this.socket.emit('userConnect', response.user.id);
                }

                return { success: true, user: response.user };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            return { success: false, message: error.message };
        }
    }

    // –í—ã—Ö–æ–¥
    logout() {
        this.token = null;
        localStorage.removeItem('wgarage-token');
        localStorage.removeItem('wgarage-current-user');
        
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser() {
        const userData = localStorage.getItem('wgarage-current-user');
        return userData ? JSON.parse(userData) : null;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    isLoggedIn() {
        return !!this.token && !!this.getCurrentUser();
    }

    // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
    async changePassword(oldPassword, newPassword) {
        return await this.request('/auth/change-password', {
            method: 'POST',
            body: JSON.stringify({ oldPassword, newPassword })
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getUsers() {
        return await this.request('/users');
    }

    // –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
    async getTasks() {
        return await this.request('/tasks');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    async createTask(taskData) {
        return await this.request('/tasks', {
            method: 'POST',
            body: JSON.stringify(taskData)
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    async updateTaskStatus(taskId, status, comment = '') {
        return await this.request(`/tasks/${taskId}/status`, {
            method: 'PUT',
            body: JSON.stringify({ status, comment })
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    async addTaskComment(taskId, comment) {
        return await this.request(`/tasks/${taskId}/comments`, {
            method: 'POST',
            body: JSON.stringify({ comment })
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    async getTaskComments(taskId) {
        return await this.request(`/tasks/${taskId}/comments`);
    }

    // –†–∞–±–æ—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async getNotifications() {
        return await this.request('/notifications');
    }

    // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    async markNotificationAsRead(notificationId) {
        return await this.request(`/notifications/${notificationId}/read`, {
            method: 'PUT'
        });
    }

    // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    async markAllNotificationsAsRead() {
        return await this.request('/notifications/read-all', {
            method: 'PUT'
        });
    }

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)
    async getAnalytics() {
        return await this.request('/analytics/dashboard');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    updateTaskList() {
        if (window.dashboard && typeof window.dashboard.refreshTasksPage === 'function') {
            window.dashboard.refreshTasksPage();
        }
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(title, message, type = 'info') {
        if (window.NotificationManager) {
            window.NotificationManager[type](message, 5000);
        } else {
            // Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification(title, { body: message });
            }
        }
    }

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async requestNotificationPermission() {
        if ('Notification' in window) {
            const permission = await Notification.requestPermission();
            return permission === 'granted';
        }
        return false;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.WGarageAPI = new WGarageAPI();

// –û–±–Ω–æ–≤–ª—è–µ–º UserManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º API
window.UserManager = {
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    async login(username, password) {
        return await window.WGarageAPI.login(username, password);
    },

    // –í—ã—Ö–æ–¥
    logout() {
        window.WGarageAPI.logout();
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    isLoggedIn() {
        return window.WGarageAPI.isLoggedIn();
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getCurrentUser() {
        return window.WGarageAPI.getCurrentUser();
    },

    // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
    async changePassword(oldPassword, newPassword) {
        return await window.WGarageAPI.changePassword(oldPassword, newPassword);
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getAvailableUsers() {
        try {
            return await window.WGarageAPI.getUsers();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }
};

// –û–±–Ω–æ–≤–ª—è–µ–º TaskManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º API
window.TaskManager = {
    tasks: [],

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        try {
            await this.loadTasks();
            console.log('‚úÖ TaskManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TaskManager:', error);
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
    async loadTasks() {
        try {
            this.tasks = await window.WGarageAPI.getTasks();
            return this.tasks;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:', error);
            // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.tasks = JSON.parse(localStorage.getItem('wgarage-tasks') || '[]');
            return this.tasks;
        }
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    async createTask(taskData) {
        try {
            const result = await window.WGarageAPI.createTask(taskData);
            await this.loadTasks(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
            return { success: true, task: result };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
            return { success: false, message: error.message };
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getTasksForUser(userId) {
        return this.tasks.filter(task => 
            task.assignedTo === userId || task.assignedBy === userId
        );
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π)
    getAllTasks() {
        const currentUser = window.UserManager.getCurrentUser();
        if (!currentUser || !currentUser.canViewAll) return [];
        return this.tasks;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
    async updateTaskStatus(taskId, status, comment = '') {
        try {
            await window.WGarageAPI.updateTaskStatus(taskId, status, comment);
            await this.loadTasks();
            return { success: true };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            return { success: false, message: error.message };
        }
    },

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    async addComment(taskId, comment) {
        try {
            await window.WGarageAPI.addTaskComment(taskId, comment);
            return { success: true };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
            return { success: false, message: error.message };
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    async getComments(taskId) {
        try {
            return await window.WGarageAPI.getTaskComments(taskId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
            return [];
        }
    },

    // –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç—É
    async acceptTask(taskId, comment = '') {
        return await this.updateTaskStatus(taskId, 'in_progress', comment);
    },

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    async completeTask(taskId, comment = '') {
        return await this.updateTaskStatus(taskId, 'completed', comment);
    },

    // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    async rejectTask(taskId, reason) {
        return await this.updateTaskStatus(taskId, 'rejected', reason);
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ ID
    getTask(taskId) {
        return this.tasks.find(task => task.id === taskId);
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    getStatusText(status) {
        const statuses = {
            'new': '–ù–æ–≤–∞—è',
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
        };
        return statuses[status] || status;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á
    async getAvailableAssignees() {
        return await window.UserManager.getAvailableUsers();
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    window.WGarageAPI.requestNotificationPermission();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TaskManager –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (window.UserManager.isLoggedIn()) {
        window.TaskManager.init();
    }
});

console.log('‚úÖ W Garage API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
