// JavaScript –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
class Dashboard {
    constructor() {
        this.currentUser = null;
        this.currentPage = 'overview';
        
        this.init();
    }
    
    init() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (!window.UserManager.isLoggedIn()) {
            window.location.href = 'login.html';
            return;
        }
        
        this.currentUser = window.UserManager.getCurrentUser();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TaskManager –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.TaskManager && typeof window.TaskManager.init === 'function') {
            window.TaskManager.init();
            console.log('‚úÖ TaskManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.error('‚ùå TaskManager –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ScheduleManager –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.ScheduleManager) {
            window.scheduleManager = new window.ScheduleManager();
            console.log('‚úÖ ScheduleManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } else {
            console.error('‚ùå ScheduleManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (window.usersDatabase) {
            console.log(`‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞: ${Object.keys(window.usersDatabase).length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        } else {
            console.error('‚ùå –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
        this.setupUI();
        this.setupEventListeners();
        this.loadPage('overview');
        this.updateNotificationBadge();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            this.updateNotificationBadge();
        }, 30000);
    }
    
    setupUI() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        document.getElementById('userName').textContent = this.currentUser.name;
        document.getElementById('userPosition').textContent = this.currentUser.position;
        document.getElementById('avatarImg').src = this.currentUser.avatar;
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
        if (this.currentUser.canViewAll) {
            document.getElementById('employeeListNav').style.display = 'block';
        }
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        this.updateThemeIcon(savedTheme);
    }
    
    setupEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = e.currentTarget.getAttribute('data-page');
                this.loadPage(page);
            });
        });
        
        // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        const logoutLink = document.getElementById('logoutLink');
        if (logoutLink) {
            logoutLink.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
                this.logout();
            });
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç logoutLink –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                const delayedLogoutLink = document.getElementById('logoutLink');
                if (delayedLogoutLink) {
                    console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç logoutLink –Ω–∞–π–¥–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π');
                    delayedLogoutLink.addEventListener('click', (e) => {
                        e.preventDefault();
                        console.log('–ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É)');
                        this.logout();
                    });
                } else {
                    console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç logoutLink —Ç–∞–∫ –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            }, 1000);
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        const testLogoutBtn = document.getElementById('testLogoutBtn');
        if (testLogoutBtn) {
            testLogoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞');
                this.logout();
            });
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        document.getElementById('themeToggle').addEventListener('click', () => {
            this.toggleTheme();
        });
        
        // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        document.getElementById('changePasswordLink').addEventListener('click', (e) => {
            e.preventDefault();
            this.showChangePasswordModal();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
        document.getElementById('profileLink').addEventListener('click', (e) => {
            e.preventDefault();
            this.loadPage('my-profile');
        });
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.setupModals();
    }
    
    setupModals() {
        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
        const changePasswordModal = document.getElementById('changePasswordModal');
        const closePasswordModal = document.getElementById('closePasswordModal');
        const cancelPasswordChange = document.getElementById('cancelPasswordChange');
        const changePasswordForm = document.getElementById('changePasswordForm');
        
        closePasswordModal.addEventListener('click', () => {
            this.hideChangePasswordModal();
        });
        
        cancelPasswordChange.addEventListener('click', () => {
            this.hideChangePasswordModal();
        });
        
        changePasswordForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handlePasswordChange();
        });
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–≤ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
        changePasswordModal.addEventListener('click', (e) => {
            if (e.target === changePasswordModal) {
                this.hideChangePasswordModal();
            }
        });
    }
    
    loadPage(pageId) {
        this.currentPage = pageId;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        document.querySelector(`[data-page="${pageId}"]`).classList.add('active');
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const content = this.getPageContent(pageId);
        document.getElementById('dashboardContent').innerHTML = content;
        document.getElementById('currentPage').textContent = this.getPageTitle(pageId);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.initPageHandlers(pageId);
    }
    
    getPageTitle(pageId) {
        const titles = {
            'overview': '–û–±–∑–æ—Ä',
            'my-profile': '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
            'knowledge-base': '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
            'orgchart': '–û—Ä–≥—Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
            'employees': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
            'schedule': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            'tasks': '–ó–∞–¥–∞—á–∏',
            'reports': '–û—Ç—á–µ—Ç—ã'
        };
        return titles[pageId] || '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç';
    }
    
    getPageContent(pageId) {
        switch (pageId) {
            case 'overview':
                return this.getOverviewContent();
            case 'my-profile':
                return this.getProfileContent();
            case 'knowledge-base':
                return this.getKnowledgeBaseContent();
            case 'orgchart':
                return this.getOrgChartContent();
            case 'employees':
                return this.getEmployeesContent();
            case 'schedule':
                return this.getScheduleContent();
            case 'tasks':
                return this.getTasksContent();
            case 'reports':
                return this.getReportsContent();
            default:
                return '<p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>';
        }
    }
    
    getOverviewContent() {
        const roleData = window.roleDatabase[this.currentUser.role];
        const birthdayToday = this.checkBirthday();
        
        return `
            <div class="page-header">
                <h1 class="page-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${this.currentUser.name}!</h1>
                <p class="page-subtitle">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ W Garage</p>
            </div>
            
            ${birthdayToday ? `
                <div class="birthday-banner">
                    <i class="fas fa-birthday-cake"></i>
                    <div>
                        <h3>üéâ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!</h3>
                        <p>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏!</p>
                    </div>
                </div>
            ` : ''}
            
            <div class="dashboard-grid">
                <div class="dashboard-card">
                    <div class="card-header">
                        <div class="card-icon">
                            <i class="fas fa-user"></i>
                        </div>
                        <h3 class="card-title">–ú–æ—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å</h3>
                    </div>
                    <div class="card-content">
                        <p><strong>${this.currentUser.position}</strong></p>
                        <p>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ${window.accessLevels[this.currentUser.accessLevel]}</p>
                        ${this.currentUser.birthday ? `<p>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${this.currentUser.birthday}</p>` : ''}
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <div class="card-icon">
                            <i class="fas fa-tasks"></i>
                        </div>
                        <h3 class="card-title">–ú–æ–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</h3>
                    </div>
                    <div class="card-content">
                        <p>–û—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π: <strong>${roleData?.responsibilities?.length || 0}</strong></p>
                        <p>–¢—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤: <strong>${roleData?.skills?.length || 0}</strong></p>
                        <p>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: <strong>${roleData?.tools?.length || 0}</strong></p>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <div class="card-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <h3 class="card-title">–†–∞–±–æ—á–∏–π –¥–µ–Ω—å</h3>
                    </div>
                    <div class="card-content">
                        <p>–°–µ–≥–æ–¥–Ω—è: <strong>${new Date().toLocaleDateString('ru-RU', { 
                            weekday: 'long', 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                        })}</strong></p>
                        <p>–í—Ä–µ–º—è: <strong>${new Date().toLocaleTimeString('ru-RU')}</strong></p>
                    </div>
                </div>
                
                ${this.currentUser.canViewAll ? `
                    <div class="dashboard-card">
                        <div class="card-header">
                            <div class="card-icon">
                                <i class="fas fa-users"></i>
                            </div>
                            <h3 class="card-title">–ö–æ–º–∞–Ω–¥–∞</h3>
                        </div>
                        <div class="card-content">
                            <p>–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: <strong>${Object.keys(window.usersDatabase).length}</strong></p>
                            <p>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: <strong>${Object.values(window.usersDatabase).filter(u => u.accessLevel === 0).length}</strong></p>
                            <p>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: <strong>${Object.values(window.usersDatabase).filter(u => u.accessLevel > 0).length}</strong></p>
                        </div>
                    </div>
                ` : ''}
            </div>
        `;
    }
    
    getProfileContent() {
        const roleData = window.roleDatabase[this.currentUser.role];
        
        return `
            <div class="page-header">
                <h1 class="page-title">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
                <p class="page-subtitle">–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏</p>
            </div>
            
            <div class="profile-info">
                <div class="profile-card">
                    <div class="profile-header">
                        <div class="profile-avatar">
                            <img src="${this.currentUser.avatar}" alt="${this.currentUser.name}">
                        </div>
                        <div class="profile-details">
                            <h2>${this.currentUser.name}</h2>
                            <p class="profile-position">${this.currentUser.position}</p>
                            <p class="profile-access">${window.accessLevels[this.currentUser.accessLevel]}</p>
                            ${this.currentUser.birthday ? `<p class="profile-birthday">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${this.currentUser.birthday}</p>` : ''}
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="dashboard-grid">
                <div class="dashboard-card">
                    <div class="card-header">
                        <div class="card-icon">
                            <i class="fas fa-tasks"></i>
                        </div>
                        <h3 class="card-title">–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</h3>
                    </div>
                    <div class="card-content">
                        <ul class="responsibilities-list">
                            ${roleData?.responsibilities?.map(resp => `<li>${resp}</li>`).join('') || '<li>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</li>'}
                        </ul>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <div class="card-icon">
                            <i class="fas fa-graduation-cap"></i>
                        </div>
                        <h3 class="card-title">–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏</h3>
                    </div>
                    <div class="card-content">
                        <ul class="skills-list">
                            ${roleData?.skills?.map(skill => `<li>${skill}</li>`).join('') || '<li>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</li>'}
                        </ul>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <div class="card-icon">
                            <i class="fas fa-tools"></i>
                        </div>
                        <h3 class="card-title">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</h3>
                    </div>
                    <div class="card-content">
                        <ul class="tools-list">
                            ${roleData?.tools?.map(tool => `<li>${tool}</li>`).join('') || '<li>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</li>'}
                        </ul>
                    </div>
                </div>
                
                <div class="dashboard-card">
                    <div class="card-header">
                        <div class="card-icon">
                            <i class="fas fa-clipboard-list"></i>
                        </div>
                        <h3 class="card-title">–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h3>
                    </div>
                    <div class="card-content">
                        <ul class="procedures-list">
                            ${roleData?.procedures?.map(proc => `<li>${proc}</li>`).join('') || '<li>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</li>'}
                        </ul>
                    </div>
                </div>
            </div>
        `;
    }
    
    getKnowledgeBaseContent() {
        const currentUser = window.UserManager.getCurrentUser();
        const personalKB = window.personalKnowledgeBase[currentUser.id];
        
        let content = `
            <div class="page-header">
                <h1 class="page-title">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</h1>
                <p class="page-subtitle">–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</p>
            </div>
        `;
        
        if (personalKB) {
            // –î–æ–∫—É–º–µ–Ω—Ç—ã
            if (personalKB.documents && personalKB.documents.length > 0) {
                content += `
                    <div class="knowledge-section">
                        <h3><i class="fas fa-file-alt"></i> –î–æ–∫—É–º–µ–Ω—Ç—ã</h3>
                        <div class="documents-grid">
                            ${personalKB.documents.map(doc => `
                                <div class="document-card">
                                    <div class="document-header">
                                        <h4>${doc.title}</h4>
                                        <span class="document-type">${this.getDocumentTypeText(doc.type)}</span>
                                    </div>
                                    <p class="document-content">${doc.content.substring(0, 150)}...</p>
                                    <div class="document-footer">
                                        <span class="document-date">–°–æ–∑–¥–∞–Ω: ${this.formatDate(doc.created)}</span>
                                        <button class="btn btn-sm btn-outline" onclick="window.dashboard.showDocument('${doc.id}')">
                                            –û—Ç–∫—Ä—ã—Ç—å
                                        </button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }
            
            // –ü—Ä–æ—Ü–µ–¥—É—Ä—ã
            if (personalKB.procedures && personalKB.procedures.length > 0) {
                content += `
                    <div class="knowledge-section">
                        <h3><i class="fas fa-list-ol"></i> –†–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</h3>
                        <div class="procedures-list">
                            ${personalKB.procedures.map(procedure => `
                                <div class="procedure-item">
                                    <i class="fas fa-check-circle"></i>
                                    <span>${procedure}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }
            
            // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            if (personalKB.tools && personalKB.tools.length > 0) {
                content += `
                    <div class="knowledge-section">
                        <h3><i class="fas fa-tools"></i> –†–∞–±–æ—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
                        <div class="tools-list">
                            ${personalKB.tools.map(tool => `
                                <div class="tool-item">
                                    <i class="fas fa-wrench"></i>
                                    <span>${tool}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
            }
        } else {
            content += `
                <div class="no-knowledge">
                    <i class="fas fa-book"></i>
                    <h3>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞</h3>
                    <p>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ —Ä–∞–±–æ—Ç—ã</p>
                </div>
            `;
        }
        
        // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        content += `
            <div class="knowledge-section">
                <h3><i class="fas fa-external-link-alt"></i> –û–±—â–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</h3>
                <div class="external-knowledge">
                    <div class="redirect-card">
                        <h4>–ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π W Garage</h4>
                        <p>–í—Å–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</p>
                        <button class="btn btn-primary" onclick="window.location.href='index.html'">
                            –û—Ç–∫—Ä—ã—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        return content;
    }
    
    getEmployeesContent() {
        if (!this.currentUser.canViewAll) {
            return `
                <div class="page-header">
                    <h1 class="page-title">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
                    <p class="page-subtitle">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
                </div>
            `;
        }
        
        const employees = Object.values(window.usersDatabase);
        const groupedEmployees = this.groupEmployeesByAccessLevel(employees);
        
        let content = `
            <div class="page-header">
                <h1 class="page-title">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h1>
                <p class="page-subtitle">–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ W Garage</p>
            </div>
        `;
        
        Object.entries(groupedEmployees).forEach(([level, employees]) => {
            content += `
                <div class="employee-group">
                    <h3 class="group-title">${window.accessLevels[level]} (${employees.length})</h3>
                    <div class="employees-grid">
                        ${employees.map(emp => this.getEmployeeCard(emp)).join('')}
                    </div>
                </div>
            `;
        });
        
        return content;
    }
    
    getEmployeeCard(employee) {
        return `
            <div class="employee-card" onclick="dashboard.showEmployeeDetails('${employee.id}')">
                <div class="employee-header">
                    <div class="employee-avatar">
                        <img src="${employee.avatar}" alt="${employee.name}">
                    </div>
                    <div class="employee-info">
                        <h3>${employee.name}</h3>
                        <p class="employee-position">${employee.position}</p>
                        <p class="employee-access">${window.accessLevels[employee.accessLevel]}</p>
                    </div>
                </div>
                <div class="employee-details">
                    <div class="detail-item">
                        <span class="detail-label">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</span>
                        <span class="detail-value">${employee.birthday || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">–õ–æ–≥–∏–Ω</span>
                        <span class="detail-value">${employee.id}</span>
                    </div>
                </div>
            </div>
        `;
    }
    
    getScheduleContent() {
        const scheduleManager = window.scheduleManager || new ScheduleManager();
        
        return `
            <div class="page-header">
                <h1 class="page-title">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ò—é–ª—å 2025</h1>
                <p class="page-subtitle">–†–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –≥—Ä–∞—Ñ–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
            </div>
            
            <div class="schedule-table-container">
                ${this.renderScheduleTable(scheduleManager)}
            </div>
            
            <div class="schedule-legend">
                <h4>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:</h4>
                <div class="legend-items">
                    <span class="legend-item"><span class="legend-color working"></span> 1 - –†–∞–±–æ—á–∏–π –¥–µ–Ω—å</span>
                    <span class="legend-item"><span class="legend-color weekend"></span> –í - –í—ã—Ö–æ–¥–Ω–æ–π</span>
                    <span class="legend-item"><span class="legend-color total"></span> –ö–æ–ª-–≤–æ –¥–Ω–µ–π - –í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π</span>
                </div>
            </div>
        `;
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    renderScheduleTable(scheduleManager) {
        const scheduleData = scheduleManager.getScheduleTableData();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        const departmentGroups = {};
        Object.entries(scheduleData.employees).forEach(([userId, employee]) => {
            const dept = employee.department;
            if (!departmentGroups[dept]) {
                departmentGroups[dept] = [];
            }
            departmentGroups[dept].push({
                userId,
                ...employee
            });
        });
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        let tableHTML = `
            <div class="schedule-table">
                <table class="schedule-main-table">
                    <thead>
                        <tr class="schedule-header">
                            <th class="dept-header">–û—Ç–¥–µ–ª</th>
                            <th class="name-header">–§–ò–û</th>
                            ${Array.from({length: 31}, (_, i) => 
                                `<th class="day-header">${i + 1}</th>`
                            ).join('')}
                            <th class="total-header">–ö–æ–ª-–≤–æ –¥–Ω–µ–π</th>
                        </tr>
                        <tr class="weekday-header">
                            <th colspan="2">–ò–Æ–õ–¨ 2025</th>
                            ${this.generateWeekdayHeaders()}
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        
        // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤
        const departmentColors = {
            '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ': '#4CAF50',
            '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç': '#FF9800', 
            '–ü—Ä–∏–µ–º–Ω–∞—è': '#2196F3',
            '–û—Ñ–∏—Å': '#9C27B0',
            '–¢–æ–ø–ª–∏–≤—â–∏–∫–∏ —Ç–≤—ë—Ä–¥': '#FFEB3B',
            '–¢–æ–ø–ª–∏–≤—â–∏–∫–∏ –ù-–§': '#FFC107',
            '–¢–æ–ø–ª–∏–≤—â–∏–∫–∏ —Ñ–æ—Ä—Å—É–Ω–∫–∏': '#FF5722',
            '–°–ª–µ—Å–∞—Ä–Ω—ã–π —Ü–µ—Ö': '#795548',
            '–°–ª–µ—Å–∞—Ä—å': '#607D8B',
            '–¢—É—Ä–±–∏–Ω–Ω—ã–π —Ü–µ—Ö': '#8BC34A',
            '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è': '#E91E63'
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        Object.entries(departmentGroups).forEach(([deptName, employees]) => {
            const deptColor = departmentColors[deptName] || '#757575';
            
            employees.forEach((employee, index) => {
                const isFirstInDept = index === 0;
                const deptRowspan = employees.length;
                
                tableHTML += `
                    <tr class="employee-row" data-department="${deptName}">
                        ${isFirstInDept ? `<td class="dept-cell" rowspan="${deptRowspan}" style="background-color: ${deptColor}; color: white; font-weight: bold;">${deptName}</td>` : ''}
                        <td class="name-cell">${employee.name}</td>
                        ${this.renderEmployeeScheduleDays(employee.schedule)}
                        <td class="total-cell">${employee.workDays}</td>
                    </tr>
                `;
            });
        });
        
        tableHTML += `
                    </tbody>
                </table>
            </div>
        `;
        
        return tableHTML;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    generateWeekdayHeaders() {
        const weekdays = ['–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢'];
        return weekdays.map(day => `<th class="weekday-cell">${day}</th>`).join('');
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏—Ç –¥–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    renderEmployeeScheduleDays(schedule) {
        let daysHTML = '';
        for (let day = 1; day <= 31; day++) {
            const dayStatus = schedule[day];
            const cellClass = dayStatus === 'work' ? 'work-day' : 'weekend-day';
            const cellContent = dayStatus === 'work' ? '1' : '–í';
            
            daysHTML += `<td class="schedule-day ${cellClass}">${cellContent}</td>`;
        }
        return daysHTML;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    getMonthName(monthIndex) {
        const months = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        return months[monthIndex];
    }
    
    renderScheduleCalendar(year, month) {
        const scheduleManager = window.scheduleManager || new ScheduleManager();
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startDayOfWeek = firstDay.getDay();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        const employees = Object.values(window.usersDatabase || {}).filter(user => user.role !== 'admin');
        
        let calendarHTML = `
            <div class="calendar-header">
                <div class="calendar-day-header">–°–æ—Ç—Ä—É–¥–Ω–∏–∫</div>
                ${Array.from({length: daysInMonth}, (_, i) => {
                    const date = new Date(year, month, i + 1);
                    const dayName = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][date.getDay()];
                    return `<div class="calendar-day-header">${i + 1}<br><span class="day-name">${dayName}</span></div>`;
                }).join('')}
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employees.forEach(employee => {
            const schedule = scheduleManager.getEmployeeSchedule(employee.username, year, month);
            
            calendarHTML += `
                <div class="calendar-row">
                    <div class="employee-info">
                        <div class="employee-name">${employee.name}</div>
                        <div class="employee-department">${employee.department || '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞'}</div>
                    </div>
                    ${Array.from({length: daysInMonth}, (_, i) => {
                        const daySchedule = schedule[i + 1] || 'weekend';
                        const cssClass = this.getScheduleClass(daySchedule);
                        const tooltip = this.getScheduleTooltip(daySchedule);
                        
                        return `<div class="calendar-day ${cssClass}" title="${tooltip}"></div>`;
                    }).join('')}
                </div>
            `;
        });
        
        return `<div class="calendar-grid">${calendarHTML}</div>`;
    }
    
    getScheduleClass(scheduleType) {
        const classes = {
            'work': 'working',
            'weekend': 'weekend',
            'vacation': 'vacation',
            'sick': 'sick'
        };
        return classes[scheduleType] || 'weekend';
    }
    
    getScheduleTooltip(scheduleType) {
        const tooltips = {
            'work': '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å',
            'weekend': '–í—ã—Ö–æ–¥–Ω–æ–π',
            'vacation': '–û—Ç–ø—É—Å–∫',
            'sick': '–ë–æ–ª—å–Ω–∏—á–Ω—ã–π'
        };
        return tooltips[scheduleType] || '–í—ã—Ö–æ–¥–Ω–æ–π';
    }
    
    changeScheduleMonth(direction) {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const currentTitle = document.getElementById('current-month-title');
        if (!currentTitle) return;
        
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        const titleText = currentTitle.textContent;
        const [monthName, yearStr] = titleText.split(' ');
        const currentYear = parseInt(yearStr);
        let currentMonth = this.getMonthIndex(monthName);
        
        // –ò–∑–º–µ–Ω—è–µ–º –º–µ—Å—è—Ü
        currentMonth += direction;
        let newYear = currentYear;
        
        if (currentMonth < 0) {
            currentMonth = 11;
            newYear--;
        } else if (currentMonth > 11) {
            currentMonth = 0;
            newYear++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        currentTitle.textContent = `${this.getMonthName(currentMonth)} ${newYear}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        const calendarContainer = document.getElementById('schedule-calendar');
        if (calendarContainer) {
            calendarContainer.innerHTML = this.renderScheduleCalendar(newYear, currentMonth);
        }
    }
    
    getMonthIndex(monthName) {
        const months = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        return months.indexOf(monthName);
    }
    
    filterByDepartment(department) {
        const calendarRows = document.querySelectorAll('.calendar-row');
        
        calendarRows.forEach(row => {
            const employeeDepartment = row.querySelector('.employee-department').textContent;
            
            if (department === 'all' || employeeDepartment === department || 
                (department === '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞' && employeeDepartment === '–ë–µ–∑ –æ—Ç–¥–µ–ª–∞')) {
                row.style.display = 'flex';
            } else {
                row.style.display = 'none';
            }
        });
    }
    
    getReportsContent() {
        return `
            <div class="page-header">
                <h1 class="page-title">–û—Ç—á–µ—Ç—ã</h1>
                <p class="page-subtitle">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</p>
            </div>
            
            <div class="reports-placeholder">
                <div class="placeholder-card">
                    <i class="fas fa-chart-bar"></i>
                    <h3>–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h3>
                    <p>–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö</p>
                </div>
            </div>
        `;
    }
    
    initPageHandlers(pageId) {
        console.log('=== initPageHandlers –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageId, '===');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (pageId === 'overview') {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            this.startTimeUpdate();
        } else if (pageId === 'tasks') {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á...');
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ –∑–∞–¥–∞—á
            this.initTasksTabs();
            this.initTaskEnhancements();
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            setTimeout(() => {
                console.log('–ò—â–µ–º –∫–Ω–æ–ø–∫—É createTaskBtn —á–µ—Ä–µ–∑ 200ms...');
                
                const createBtn = document.getElementById('createTaskBtn');
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–∫–∏ createTaskBtn:', createBtn);
                
                if (createBtn) {
                    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫...');
                    console.log('–ö–Ω–æ–ø–∫–∞ - —Ç–µ–∫—Å—Ç:', createBtn.textContent);
                    console.log('–ö–Ω–æ–ø–∫–∞ - –∫–ª–∞—Å—Å:', createBtn.className);
                    
                    createBtn.onclick = () => {
                        console.log('üéØ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!');
                        this.showCreateTaskModal();
                    };
                    
                    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–æ–ø–∫–µ');
                } else {
                    console.error('‚ùå –ö–Ω–æ–ø–∫–∞ createTaskBtn –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
                    console.log('–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫...');
                    
                    // –ò—â–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    const allButtons = document.querySelectorAll('button');
                    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:', allButtons.length);
                    allButtons.forEach((btn, index) => {
                        console.log(`–ö–Ω–æ–ø–∫–∞ ${index + 1}:`, {
                            id: btn.id,
                            className: btn.className,
                            text: btn.textContent.trim()
                        });
                    });
                }
            }, 200);
        }
        
        console.log('=== initPageHandlers –∑–∞–≤–µ—Ä—à–µ–Ω ===');
    }
    
    initTasksTabs() {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫ –∑–∞–¥–∞—á...');
        
        const tabButtons = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetTab = button.dataset.tab;
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
                button.classList.add('active');
                document.getElementById(targetTab).classList.add('active');
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                this.applyTaskFilters();
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
        const createTaskBtn = document.getElementById('createTaskBtn');
        if (createTaskBtn) {
            createTaskBtn.addEventListener('click', () => {
                this.showCreateTaskModal();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
        const refreshTasksBtn = document.getElementById('refreshTasksBtn');
        if (refreshTasksBtn) {
            refreshTasksBtn.addEventListener('click', () => {
                this.refreshTasksPage();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á
        const exportTasksBtn = document.getElementById('exportTasksBtn');
        if (exportTasksBtn) {
            exportTasksBtn.addEventListener('click', () => {
                this.exportTasks();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const statusFilter = document.getElementById('taskStatusFilter');
        const priorityFilter = document.getElementById('taskPriorityFilter');
        
        if (statusFilter) {
            statusFilter.addEventListener('change', () => {
                this.applyTaskFilters();
            });
        }
        
        if (priorityFilter) {
            priorityFilter.addEventListener('change', () => {
                this.applyTaskFilters();
            });
        }
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (this.currentPage === 'tasks' && (e.ctrlKey || e.metaKey)) {
                switch(e.key) {
                    case 'n':
                        e.preventDefault();
                        this.showCreateTaskModal();
                        break;
                    case 'r':
                        e.preventDefault();
                        this.refreshTasksPage();
                        break;
                }
            }
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setTimeout(() => this.applyTaskFilters(), 100);
        
        console.log('‚úÖ –í–∫–ª–∞–¥–∫–∏ –∑–∞–¥–∞—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    applyTaskFilters() {
        const statusFilter = document.getElementById('taskStatusFilter')?.value || '';
        const priorityFilter = document.getElementById('taskPriorityFilter')?.value || '';
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const activeTab = document.querySelector('.tab-btn.active')?.getAttribute('data-tab');
        const activeGrid = document.querySelector(`#${activeTab} .tasks-grid`);
        
        if (!activeGrid) return;
        
        const taskCards = activeGrid.querySelectorAll('.task-card');
        
        taskCards.forEach(card => {
            const taskStatus = card.getAttribute('data-status');
            const taskPriority = card.getAttribute('data-priority');
            
            const statusMatch = !statusFilter || taskStatus === statusFilter;
            const priorityMatch = !priorityFilter || taskPriority === priorityFilter;
            
            if (statusMatch && priorityMatch) {
                card.style.display = 'block';
                card.style.animation = 'fadeInUp 0.3s ease forwards';
            } else {
                card.style.display = 'none';
            }
        });
        
        this.updateFilteredTasksCount();
    }
    
    updateFilteredTasksCount() {
        const activeTab = document.querySelector('.tab-btn.active')?.getAttribute('data-tab');
        const activeGrid = document.querySelector(`#${activeTab} .tasks-grid`);
        
        if (!activeGrid) return;
        
        const visibleTasks = activeGrid.querySelectorAll('.task-card[style*="display: block"], .task-card:not([style*="display: none"])').length;
        const totalTasks = activeGrid.querySelectorAll('.task-card').length;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if (visibleTasks !== totalTasks) {
            const activeTabButton = document.querySelector('.tab-btn.active');
            if (activeTabButton) {
                const originalText = activeTabButton.textContent.split(' (')[0];
                activeTabButton.textContent = `${originalText} (${visibleTasks}/${totalTasks})`;
            }
        }
    }
    
    refreshTasksPage() {
        window.NotificationManager.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á...');
        this.loadPage('tasks');
    }
    
    startTimeUpdate() {
        if (this.timeInterval) {
            clearInterval(this.timeInterval);
        }
        
        this.timeInterval = setInterval(() => {
            if (this.currentPage === 'overview') {
                const timeElement = document.querySelector('.card-content strong');
                if (timeElement && timeElement.textContent.includes(':')) {
                    timeElement.textContent = new Date().toLocaleTimeString('ru-RU');
                }
            }
        }, 1000);
    }
    
    groupEmployeesByAccessLevel(employees) {
        const grouped = {};
        
        employees.forEach(emp => {
            if (!grouped[emp.accessLevel]) {
                grouped[emp.accessLevel] = [];
            }
            grouped[emp.accessLevel].push(emp);
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞
        const sortedGrouped = {};
        Object.keys(grouped)
            .sort((a, b) => parseInt(a) - parseInt(b))
            .forEach(key => {
                sortedGrouped[key] = grouped[key].sort((a, b) => a.name.localeCompare(b.name));
            });
        
        return sortedGrouped;
    }
    
    showEmployeeDetails(employeeId) {
        const employee = window.usersDatabase[employeeId];
        if (!employee) return;
        
        const roleData = window.roleDatabase[employee.role];
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const modal = document.createElement('div');
        modal.className = 'modal show';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>${employee.name}</h3>
                    <button class="modal-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="employee-details-modal">
                    <div class="employee-profile">
                        <img src="${employee.avatar}" alt="${employee.name}">
                        <div class="employee-info">
                            <h4>${employee.position}</h4>
                            <p>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ${window.accessLevels[employee.accessLevel]}</p>
                            <p>–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${employee.birthday || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                            <p>–õ–æ–≥–∏–Ω: ${employee.id}</p>
                        </div>
                    </div>
                    
                    ${roleData ? `
                        <div class="role-details">
                            <h4>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</h4>
                            <ul>${roleData.responsibilities.map(r => `<li>${r}</li>`).join('')}</ul>
                            
                            <h4>–ù–∞–≤—ã–∫–∏:</h4>
                            <ul>${roleData.skills.map(s => `<li>${s}</li>`).join('')}</ul>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.querySelector('.modal-close').addEventListener('click', () => {
            modal.remove();
        });
        
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.remove();
            }
        });
    }
    
    checkBirthday() {
        if (!this.currentUser.birthday) return false;
        
        const today = new Date();
        const [day, month] = this.currentUser.birthday.split('.');
        
        return today.getDate() === parseInt(day) && 
               today.getMonth() + 1 === parseInt(month);
    }
    
    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        this.updateThemeIcon(newTheme);
    }
    
    updateThemeIcon(theme) {
        const icon = document.querySelector('#themeToggle i');
        icon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
    }
    
    showChangePasswordModal() {
        document.getElementById('changePasswordModal').classList.add('show');
    }
    
    hideChangePasswordModal() {
        document.getElementById('changePasswordModal').classList.remove('show');
        document.getElementById('changePasswordForm').reset();
    }
    
    handlePasswordChange() {
        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        if (newPassword !== confirmPassword) {
            window.NotificationManager.error('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!');
            return;
        }
        
        if (newPassword.length < 6) {
            window.NotificationManager.warning('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!');
            return;
        }
        
        const result = window.UserManager.changePassword(currentPassword, newPassword);
        
        if (result.success) {
            window.NotificationManager.success('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
            this.hideChangePasswordModal();
        } else {
            window.NotificationManager.error(result.message);
        }
    }
    
    logout() {
        try {
            if (window.NotificationManager && typeof window.NotificationManager.confirm === 'function') {
                window.NotificationManager.confirm(
                    '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?',
                    () => {
                        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
                        if (window.wgarageAPI && typeof window.wgarageAPI.logout === 'function') {
                            window.wgarageAPI.logout();
                        }
                        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
                        window.location.href = '/login';
                    },
                    null,
                    {
                        confirmText: '–î–∞, –≤—ã–π—Ç–∏',
                        cancelText: '–û—Ç–º–µ–Ω–∞'
                    }
                );
            } else {
                // –ï—Å–ª–∏ NotificationManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?')) {
                    if (window.wgarageAPI && typeof window.wgarageAPI.logout === 'function') {
                        window.wgarageAPI.logout();
                    }
                    window.location.href = '/login';
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–π—Ç–∏
            if (window.wgarageAPI && typeof window.wgarageAPI.logout === 'function') {
                window.wgarageAPI.logout();
            }
            window.location.href = '/login';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.dashboard = new Dashboard();
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
window.logout = () => {
    if (window.dashboard && typeof window.dashboard.logout === 'function') {
        window.dashboard.logout();
    } else {
        console.error('Dashboard –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.showEmployeeDetails = (employeeId) => {
    window.dashboard.showEmployeeDetails(employeeId);
};

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å Dashboard
Dashboard.prototype.getOrgChartContent = function() {
    const orgChart = window.organizationChart;
    
    return `
        <div class="orgchart-container">
            <div class="orgchart-header">
                <h2>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ W Garage</h2>
                <p>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –∏ –∏–µ—Ä–∞—Ä—Ö–∏—è –∫–æ–º–ø–∞–Ω–∏–∏</p>
            </div>
            
            <div class="departments-grid">
                ${Object.entries(orgChart.structure).map(([key, dept]) => `
                    <div class="department-card">
                        <div class="department-header">
                            <h3>${dept.title}</h3>
                            <span class="member-count">${dept.members.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</span>
                        </div>
                        <div class="department-head">
                            <strong>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</strong> ${this.getUserName(dept.head)}
                        </div>
                        <div class="department-members">
                            <h4>–°–æ—Å—Ç–∞–≤ –æ—Ç–¥–µ–ª–∞:</h4>
                            <ul>
                                ${dept.members.map(memberId => `
                                    <li>
                                        <span class="member-name">${this.getUserName(memberId)}</span>
                                        <span class="member-position">${this.getUserPosition(memberId)}</span>
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                `).join('')}
            </div>
        </div>
    `;
};

Dashboard.prototype.getTasksContent = function() {
    const currentUser = window.UserManager.getCurrentUser();
    const userTasks = window.TaskManager.getTasksForUser(currentUser.id);
    const allTasks = currentUser.canViewAll ? window.TaskManager.getAllTasks() : [];
    
    const content = `
        <div class="tasks-container">
            <div class="tasks-header">
                <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏</h2>
                <div class="tasks-header-actions">
                    <button class="btn btn-primary" id="createTaskBtn">
                        <i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
                    </button>
                    <button class="btn btn-secondary" id="refreshTasksBtn">
                        <i class="fas fa-sync-alt"></i> –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                    <button class="btn btn-outline" id="exportTasksBtn">
                        <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                    <div class="tasks-filters">
                        <select id="taskStatusFilter" class="form-control">
                            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                            <option value="new">–ù–æ–≤—ã–µ</option>
                            <option value="in_progress">–í —Ä–∞–±–æ—Ç–µ</option>
                            <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</option>
                            <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ</option>
                            <option value="rejected">–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ</option>
                        </select>
                        <select id="taskPriorityFilter" class="form-control">
                            <option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                            <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
                            <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                            <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                            <option value="low">–ù–∏–∑–∫–∏–π</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="tasks-stats">
                ${this.renderTasksStats(userTasks, allTasks, currentUser)}
            </div>
            
            <div class="tasks-tabs">
                <button class="tab-btn active" data-tab="my-tasks">–ú–æ–∏ –∑–∞–¥–∞—á–∏ (${userTasks.length})</button>
                ${currentUser.canViewAll ? `<button class="tab-btn" data-tab="all-tasks">–í—Å–µ –∑–∞–¥–∞—á–∏ (${allTasks.length})</button>` : ''}
                <button class="tab-btn" data-tab="created-by-me">–°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π (${this.getTasksCreatedByUser(currentUser.id).length})</button>
            </div>
            
            <div class="tab-content active" id="my-tasks">
                <div class="tasks-grid" id="myTasksGrid">
                    ${userTasks.length ? userTasks.map(task => this.renderTaskCard(task)).join('') : '<div class="no-tasks"><i class="fas fa-tasks"></i><p>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á</p></div>'}
                </div>
            </div>
            
            ${currentUser.canViewAll ? `
                <div class="tab-content" id="all-tasks">
                    <div class="tasks-grid" id="allTasksGrid">
                        ${allTasks.length ? allTasks.map(task => this.renderTaskCard(task)).join('') : '<div class="no-tasks"><i class="fas fa-list"></i><p>–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç</p></div>'}
                    </div>
                </div>
            ` : ''}
            
            <div class="tab-content" id="created-by-me">
                <div class="tasks-grid" id="createdTasksGrid">
                    ${this.renderCreatedByMeTasks(currentUser.id)}
                </div>
            </div>
        </div>
    `;
    
    return content;
};

Dashboard.prototype.renderTasksStats = function(userTasks, allTasks, currentUser) {
    const stats = this.calculateTasksStats(userTasks, allTasks, currentUser);
    
    return `
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon" style="background: #3b82f6;">
                    <i class="fas fa-tasks"></i>
                </div>
                <div class="stat-content">
                    <h4>–í—Å–µ–≥–æ –∑–∞–¥–∞—á</h4>
                    <p class="stat-value">${stats.total}</p>
                    <div class="stat-detail">–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon" style="background: #10b981;">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-content">
                    <h4>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</h4>
                    <p class="stat-value">${stats.completed}</p>
                    <div class="stat-detail">${stats.completionRate}% –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon" style="background: #f59e0b;">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-content">
                    <h4>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</h4>
                    <p class="stat-value">${stats.overdue}</p>
                    <div class="stat-detail">–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è</div>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon" style="background: #ef4444;">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="stat-content">
                    <h4>–°—Ä–æ—á–Ω—ã–µ</h4>
                    <p class="stat-value">${stats.urgent}</p>
                    <div class="stat-detail">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</div>
                </div>
            </div>
        </div>
    `;
};

Dashboard.prototype.calculateTasksStats = function(userTasks, allTasks, currentUser) {
    const tasks = currentUser.canViewAll ? allTasks : userTasks;
    const now = new Date();
    
    return {
        total: tasks.length,
        active: tasks.filter(t => ['new', 'in_progress'].includes(t.status)).length,
        completed: tasks.filter(t => t.status === 'completed').length,
        overdue: tasks.filter(t => t.deadline && new Date(t.deadline) < now && t.status !== 'completed').length,
        urgent: tasks.filter(t => t.priority === 'urgent').length,
        completionRate: tasks.length > 0 ? Math.round((tasks.filter(t => t.status === 'completed').length / tasks.length) * 100) : 0
    };
};

Dashboard.prototype.getTasksCreatedByUser = function(userId) {
    const allTasks = window.TaskManager.getAllTasks();
    return allTasks.filter(task => task.assignedBy === userId);
};

Dashboard.prototype.renderCreatedByMeTasks = function(userId) {
    const createdTasks = this.getTasksCreatedByUser(userId);
    
    if (createdTasks.length === 0) {
        return '<div class="no-tasks"><i class="fas fa-plus-circle"></i><p>–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∑–∞–¥–∞—á</p></div>';
    }
    
    return createdTasks.map(task => this.renderTaskCard(task)).join('');
};

Dashboard.prototype.renderTaskCard = function(task) {
    const assignedUser = window.usersDatabase[task.assignedTo];
    const assignedByUser = window.usersDatabase[task.assignedBy];
    const currentUser = window.UserManager.getCurrentUser();
    
    const priorityColors = {
        'low': '#10b981',
        'medium': '#f59e0b', 
        'high': '#ef4444',
        'urgent': '#dc2626'
    };
    
    const statusColors = {
        'new': '#6b7280',
        'in_progress': '#3b82f6',
        'completed': '#10b981',
        'cancelled': '#ef4444',
        'rejected': '#ef4444'
    };
    
    const isAssignedToMe = task.assignedTo === currentUser.id;
    const isCreatedByMe = task.assignedBy === currentUser.id;
    const canManage = currentUser.canViewAll || isCreatedByMe;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–æ–ª–∏
    let actions = '';
    
    if (isAssignedToMe) {
        if (task.status === 'new') {
            actions += `<button class="btn btn-sm btn-success btn-action" onclick="window.dashboard.acceptTask('${task.id}')">
                <i class="fas fa-play"></i> –ü—Ä–∏–Ω—è—Ç—å
            </button>`;
            actions += `<button class="btn btn-sm btn-danger btn-action ml-1" onclick="window.dashboard.rejectTask('${task.id}')">
                <i class="fas fa-times"></i> –û—Ç–∫–ª–æ–Ω–∏—Ç—å
            </button>`;
        } else if (task.status === 'in_progress') {
            actions += `<button class="btn btn-sm btn-success btn-action" onclick="window.dashboard.completeTask('${task.id}')">
                <i class="fas fa-check"></i> –ó–∞–≤–µ—Ä—à–∏—Ç—å
            </button>`;
        }
    }
    
    if (canManage && task.status !== 'completed' && task.status !== 'cancelled') {
        actions += `<button class="btn btn-sm btn-warning btn-action ml-1" onclick="window.dashboard.editTask('${task.id}')">
            <i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </button>`;
        actions += `<button class="btn btn-sm btn-danger btn-action ml-1" onclick="window.dashboard.cancelTask('${task.id}')">
            <i class="fas fa-ban"></i> –û—Ç–º–µ–Ω–∏—Ç—å
        </button>`;
    }
    
    actions += `<button class="btn btn-sm btn-details ml-1" onclick="window.dashboard.showTaskDetails('${task.id}')">
        <i class="fas fa-info-circle"></i> –ü–æ–¥—Ä–æ–±–Ω–µ–µ
    </button>`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
    let cardClass = 'task-card';
    if (task.deadline && new Date(task.deadline) < new Date() && task.status !== 'completed') {
        cardClass += ' overdue';
    }
    if (task.priority === 'urgent') {
        cardClass += ' urgent';
    }
    
    return `
        <div class="${cardClass}" data-task-id="${task.id}" data-status="${task.status}" data-priority="${task.priority}">
            <div class="task-header">
                <h3>${task.title}</h3>
                <div class="task-badges">
                    <div class="task-priority" style="background: ${priorityColors[task.priority]}">
                        ${this.getPriorityText(task.priority)}
                    </div>
                    <div class="task-status" style="background: ${statusColors[task.status]}; color: white;">
                        ${this.getStatusText(task.status)}
                    </div>
                </div>
            </div>
            <div class="task-info">
                <p><i class="fas fa-user"></i> <strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> ${assignedUser?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p><i class="fas fa-user-tie"></i> <strong>–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫:</strong> ${assignedByUser?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</p>
                <p><i class="fas fa-calendar"></i> <strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${this.formatDate(task.created)}</p>
                ${task.deadline ? `<p><i class="fas fa-clock"></i> <strong>–°—Ä–æ–∫:</strong> ${this.formatDate(task.deadline)} ${new Date(task.deadline) < new Date() && task.status !== 'completed' ? '<span class="overdue-text">–ü–†–û–°–†–û–ß–ï–ù–û</span>' : ''}</p>` : ''}
                ${task.acceptedAt ? `<p><i class="fas fa-play"></i> <strong>–ü—Ä–∏–Ω—è—Ç–∞:</strong> ${this.formatDate(task.acceptedAt)}</p>` : ''}
                ${task.completedAt ? `<p><i class="fas fa-check"></i> <strong>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</strong> ${this.formatDate(task.completedAt)}</p>` : ''}
            </div>
            <div class="task-description">
                <p>${task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
            </div>
            ${task.comments && task.comments.length > 0 ? `
                <div class="task-comments-preview">
                    <p><i class="fas fa-comments"></i> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${task.comments.length}</p>
                    <div class="last-comment">
                        ${this.renderLastComment(task.comments[task.comments.length - 1])}
                    </div>
                </div>
            ` : ''}
            <div class="task-footer">
                <div class="task-actions">
                    ${actions}
                </div>
            </div>
        </div>
    `;
};

Dashboard.prototype.getUserName = function(userId) {
    const user = window.usersDatabase[userId];
    return user ? user.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};

Dashboard.prototype.getUserPosition = function(userId) {
    const user = window.usersDatabase[userId];
    return user ? user.position : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
};

Dashboard.prototype.getPriorityText = function(priority) {
    const priorities = {
        'low': '–ù–∏–∑–∫–∏–π',
        'medium': '–°—Ä–µ–¥–Ω–∏–π',
        'high': '–í—ã—Å–æ–∫–∏–π',
        'urgent': '–°—Ä–æ—á–Ω—ã–π'
    };
    return priorities[priority] || priority;
};

Dashboard.prototype.renderLastComment = function(comment) {
    const author = window.usersDatabase[comment.author];
    const timeAgo = this.getTimeAgo(comment.timestamp);
    
    return `
        <div class="comment-preview">
            <strong>${author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}:</strong> 
            <span class="comment-text">${comment.text}</span>
            <small class="comment-time">${timeAgo}</small>
        </div>
    `;
};

Dashboard.prototype.getTimeAgo = function(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);
    
    if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    return time.toLocaleDateString('ru-RU');
};

Dashboard.prototype.getStatusText = function(status) {
    const statuses = {
        'new': '–ù–æ–≤–∞—è',
        'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
        'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
    };
    return statuses[status] || status;
};

Dashboard.prototype.formatDate = function(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU');
};

Dashboard.prototype.showCreateTaskModal = function() {
    console.log('=== showCreateTaskModal –≤—ã–∑–≤–∞–Ω ===');
    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏...');
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('createTaskModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    this.createTaskModal();
    
    // –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.getElementById('createTaskModal');
    if (!modal) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ!');
        window.NotificationManager.error('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
        return;
    }
    
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º...');
    modal.style.display = 'flex';
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å show –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setTimeout(() => modal.classList.add('show'), 10);
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    const titleInput = document.getElementById('taskTitle');
    const descInput = document.getElementById('taskDescription');
    const assigneeSelect = document.getElementById('taskAssignee');
    const prioritySelect = document.getElementById('taskPriority');
    const deadlineInput = document.getElementById('taskDeadline');
    
    console.log('–û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã...');
    if (titleInput) titleInput.value = '';
    if (descInput) descInput.value = '';
    if (assigneeSelect) assigneeSelect.value = '';
    if (prioritySelect) prioritySelect.value = 'medium';
    if (deadlineInput) {
        deadlineInput.value = '';
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date();
        today.setMinutes(today.getMinutes() - today.getTimezoneOffset());
        deadlineInput.min = today.toISOString().slice(0, 16);
    }
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    if (titleInput) {
        titleInput.focus();
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
    modal.onclick = (e) => {
        if (e.target === modal) {
            this.hideCreateTaskModal();
        }
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    const escapeHandler = (e) => {
        if (e.key === 'Escape' && modal.style.display === 'block') {
            this.hideCreateTaskModal();
            document.removeEventListener('keydown', escapeHandler);
        }
    };
    document.addEventListener('keydown', escapeHandler);
    
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ');
};

Dashboard.prototype.hideCreateTaskModal = function() {
    console.log('–°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏...');
    const modal = document.getElementById('createTaskModal');
    if (modal) {
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å show –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è
        modal.classList.remove('show');
        console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–∫—Ä—ã—Ç–æ');
        
        // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–∑ DOM –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (modal.parentNode) {
                modal.style.display = 'none';
                modal.parentNode.removeChild(modal);
                console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ DOM');
            }
        }, 300);
    } else {
        console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è');
    }
};

Dashboard.prototype.createTask = function() {
    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        const titleElement = document.getElementById('taskTitle');
        const descriptionElement = document.getElementById('taskDescription');
        const assigneeElement = document.getElementById('taskAssignee');
        const priorityElement = document.getElementById('taskPriority');
        const deadlineElement = document.getElementById('taskDeadline');
        
        if (!titleElement || !assigneeElement) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            window.NotificationManager.error('–û—à–∏–±–∫–∞: —Ñ–æ—Ä–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            return;
        }
        
        const title = titleElement.value.trim();
        const description = descriptionElement ? descriptionElement.value.trim() : '';
        const assignedTo = assigneeElement.value;
        const priority = priorityElement ? priorityElement.value : 'medium';
        const deadline = deadlineElement ? deadlineElement.value : '';
        
        console.log('–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', { title, description, assignedTo, priority, deadline });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!title) {
            window.NotificationManager.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
            titleElement.focus();
            return;
        }
        
        if (!assignedTo) {
            window.NotificationManager.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
            assigneeElement.focus();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TaskManager –¥–æ—Å—Ç—É–ø–µ–Ω
        if (!window.TaskManager || typeof window.TaskManager.createTask !== 'function') {
            console.error('TaskManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            window.NotificationManager.error('–û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            return;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const taskData = {
            title: title,
            description: description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
            assignedTo: assignedTo,
            priority: priority,
            deadline: deadline || null
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        if (window.scheduleManager && deadline) {
            const deadlineDate = new Date(deadline);
            const isAvailable = window.scheduleManager.isEmployeeAvailable(assignedTo, deadlineDate);
            
            if (!isAvailable) {
                const confirmMessage = `‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å "${assignedTo}" –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ (${deadline}).\n\n–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤—Å—ë —Ä–∞–≤–Ω–æ?`;
                
                window.NotificationManager.confirm(
                    confirmMessage,
                    () => {
                        this.proceedWithTaskCreation(taskData);
                    },
                    () => {
                        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è');
                    },
                    {
                        confirmText: '–î–∞, —Å–æ–∑–¥–∞—Ç—å',
                        cancelText: '–û—Ç–º–µ–Ω–∞'
                    }
                );
                return;
            }
        }
        
        this.proceedWithTaskCreation(taskData);
    } catch (error) {
        console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ createTask:', error);
        window.NotificationManager.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
};

Dashboard.prototype.proceedWithTaskCreation = function(taskData) {
    try {
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', taskData);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ TaskManager
        const result = window.TaskManager.createTask(taskData);
        
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:', result);
        
        if (result && result.success) {
            window.NotificationManager.success('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            this.hideCreateTaskModal();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á, –µ—Å–ª–∏ –º—ã –Ω–∞ –Ω–µ–π
            if (this.currentPage === 'tasks') {
                this.loadPage('tasks');
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            this.updateNotificationBadge();
        } else {
            const errorMessage = result ? result.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏';
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', errorMessage);
            window.NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' + errorMessage);
        }
    } catch (error) {
        console.error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ createTask:', error);
        window.NotificationManager.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
};

Dashboard.prototype.showTaskDetails = function(taskId) {
    const task = window.TaskManager.getTask(taskId);
    if (!task) {
        window.NotificationManager.error('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    this.showTaskDetailModal(task);
};

// –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á–∏
Dashboard.prototype.acceptTask = function(taskId) {
    window.NotificationManager.prompt(
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):',
        (reason) => {
            const result = window.TaskManager.acceptTask(taskId, reason);
            if (result.success) {
                window.NotificationManager.success('–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!');
                this.refreshCurrentPage();
            } else {
                window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
            }
        },
        {
            placeholder: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...',
            required: false,
            submitText: '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É',
            cancelText: '–û—Ç–º–µ–Ω–∞'
        }
    );
};

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
Dashboard.prototype.completeTask = function(taskId) {
    window.NotificationManager.prompt(
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):',
        (comment) => {
            const result = window.TaskManager.completeTask(taskId, comment);
            if (result.success) {
                window.NotificationManager.success('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
                this.refreshCurrentPage();
            } else {
                window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
            }
        },
        {
            placeholder: '–û–ø–∏—à–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...',
            required: false,
            submitText: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É',
            cancelText: '–û—Ç–º–µ–Ω–∞'
        }
    );
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
Dashboard.prototype.rejectTask = function(taskId) {
    window.NotificationManager.prompt(
        '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:',
        (reason) => {
            if (!reason || reason.trim() === '') {
                window.NotificationManager.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
                return;
            }
            
            const result = window.TaskManager.rejectTask(taskId, reason);
            if (result.success) {
                window.NotificationManager.warning('–ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
                this.refreshCurrentPage();
            } else {
                window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
            }
        },
        {
            placeholder: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...',
            required: true,
            submitText: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É',
            cancelText: '–û—Ç–º–µ–Ω–∞'
        }
    );
};

// –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏
Dashboard.prototype.cancelTask = function(taskId) {
    window.NotificationManager.confirm(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?',
        () => {
            window.NotificationManager.prompt(
                '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:',
                (reason) => {
                    if (!reason || reason.trim() === '') {
                        window.NotificationManager.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã');
                        return;
                    }
                    
                    const result = window.TaskManager.updateTaskStatus(taskId, 'cancelled', reason);
                    if (result.success) {
                        window.NotificationManager.info('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                        this.refreshCurrentPage();
                    } else {
                        window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
                    }
                },
                {
                    placeholder: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã...',
                    required: true,
                    submitText: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É',
                    cancelText: '–ù–∞–∑–∞–¥'
                }
            );
        },
        null,
        {
            confirmText: '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
            cancelText: '–ù–µ—Ç'
        }
    );
};

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
Dashboard.prototype.editTask = function(taskId) {
    const task = window.TaskManager.getTask(taskId);
    if (!task) {
        alert('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    this.showEditTaskModal(task);
};

Dashboard.prototype.refreshCurrentPage = function() {
    if (this.currentPage === 'tasks') {
        this.loadPage('tasks');
    }
};

Dashboard.prototype.showTaskDetailModal = function(task) {
    const assignedUser = window.usersDatabase[task.assignedTo];
    const assignedByUser = window.usersDatabase[task.assignedBy];
    const currentUser = window.UserManager.getCurrentUser();
    
    const modal = document.createElement('div');
    modal.className = 'modal task-detail-modal';
    modal.id = 'taskDetailModal';
    
    const priorityColors = {
        'low': '#10b981',
        'medium': '#f59e0b', 
        'high': '#ef4444',
        'urgent': '#dc2626'
    };
    
    const statusColors = {
        'new': '#6b7280',
        'in_progress': '#3b82f6',
        'completed': '#10b981',
        'cancelled': '#ef4444',
        'rejected': '#ef4444'
    };
    
    modal.innerHTML = `
        <div class="modal-content task-detail-content">
            <div class="modal-header">
                <h3>${task.title}</h3>
                <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
            </div>
            <div class="modal-body">
                <div class="task-detail-info">
                    <div class="task-badges">
                        <span class="badge priority-badge" style="background: ${priorityColors[task.priority]}">
                            ${this.getPriorityText(task.priority)}
                        </span>
                        <span class="badge status-badge" style="background: ${statusColors[task.status]}">
                            ${this.getStatusText(task.status)}
                        </span>
                    </div>
                    
                    <div class="task-meta">
                        <div class="meta-item">
                            <i class="fas fa-user"></i>
                            <strong>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</strong> ${assignedUser?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${assignedUser?.position || ''})
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-user-tie"></i>
                            <strong>–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫:</strong> ${assignedByUser?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${assignedByUser?.position || ''})
                        </div>
                        <div class="meta-item">
                            <i class="fas fa-calendar-plus"></i>
                            <strong>–°–æ–∑–¥–∞–Ω–∞:</strong> ${this.formatDate(task.created)}
                        </div>
                        ${task.deadline ? `
                            <div class="meta-item">
                                <i class="fas fa-clock"></i>
                                <strong>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</strong> ${this.formatDate(task.deadline)}
                                ${new Date(task.deadline) < new Date() && task.status !== 'completed' ? '<span class="overdue-text">–ü–†–û–°–†–û–ß–ï–ù–û</span>' : ''}
                            </div>
                        ` : ''}
                        ${task.acceptedAt ? `
                            <div class="meta-item">
                                <i class="fas fa-play"></i>
                                <strong>–ü—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É:</strong> ${this.formatDate(task.acceptedAt)}
                            </div>
                        ` : ''}
                        ${task.completedAt ? `
                            <div class="meta-item">
                                <i class="fas fa-check"></i>
                                <strong>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</strong> ${this.formatDate(task.completedAt)}
                            </div>
                        ` : ''}
                        <div class="meta-item">
                            <i class="fas fa-edit"></i>
                            <strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</strong> ${this.formatDate(task.updated)}
                        </div>
                    </div>
                    
                    <div class="task-description">
                        <h4><i class="fas fa-file-text"></i> –û–ø–∏—Å–∞–Ω–∏–µ</h4>
                        <p>${task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                    </div>
                </div>
                
                <div class="task-comments-section">
                    <h4><i class="fas fa-comments"></i> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è (${task.comments?.length || 0})</h4>
                    <div class="comments-list" id="commentsContainer">
                        ${this.renderComments(task.comments || [])}
                    </div>
                    
                    <div class="add-comment-section">
                        <div class="form-group">
                            <textarea id="newComment" placeholder="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." rows="3"></textarea>
                        </div>
                        <button class="btn btn-primary" onclick="window.dashboard.addTaskComment('${task.id}')">
                            <i class="fas fa-paper-plane"></i> –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        </button>
                    </div>
                </div>
                
                <div class="task-actions-section">
                    ${this.renderTaskActions(task)}
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
};

Dashboard.prototype.renderComments = function(comments) {
    if (!comments || comments.length === 0) {
        return '<p class="no-comments">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
    }
    
    return comments.map(comment => {
        const author = window.usersDatabase[comment.author];
        const typeIcons = {
            'comment': 'fas fa-comment',
            'status_change': 'fas fa-exchange-alt',
            'accept': 'fas fa-play',
            'complete': 'fas fa-check',
            'reject': 'fas fa-times'
        };
        
        const typeColors = {
            'comment': '#6b7280',
            'status_change': '#3b82f6',
            'accept': '#10b981',
            'complete': '#10b981',
            'reject': '#ef4444'
        };
        
        return `
            <div class="comment-item ${comment.type || 'comment'}">
                <div class="comment-header">
                    <div class="comment-author">
                        <i class="${typeIcons[comment.type] || 'fas fa-comment'}" style="color: ${typeColors[comment.type] || '#6b7280'}"></i>
                        <strong>${author?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</strong>
                        <span class="author-position">${author?.position || ''}</span>
                    </div>
                    <div class="comment-time">${this.formatDate(comment.timestamp)}</div>
                </div>
                <div class="comment-text">${comment.text}</div>
            </div>
        `;
    }).join('');
};

Dashboard.prototype.renderTaskActions = function(task) {
    const currentUser = window.UserManager.getCurrentUser();
    const isAssignedToMe = task.assignedTo === currentUser.id;
    const isCreatedByMe = task.assignedBy === currentUser.id;
    const canManage = currentUser.canViewAll || isCreatedByMe;
    
    let actions = [];
    
    if (isAssignedToMe) {
        if (task.status === 'new') {
            actions.push(`<button class="btn btn-success" onclick="window.dashboard.acceptTaskFromModal('${task.id}')"><i class="fas fa-play"></i> –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É</button>`);
            actions.push(`<button class="btn btn-danger" onclick="window.dashboard.rejectTaskFromModal('${task.id}')"><i class="fas fa-times"></i> –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>`);
        } else if (task.status === 'in_progress') {
            actions.push(`<button class="btn btn-success" onclick="window.dashboard.completeTaskFromModal('${task.id}')"><i class="fas fa-check"></i> –ó–∞–≤–µ—Ä—à–∏—Ç—å</button>`);
        }
    }
    
    if (canManage && task.status !== 'completed' && task.status !== 'cancelled') {
        actions.push(`<button class="btn btn-warning" onclick="window.dashboard.editTaskFromModal('${task.id}')"><i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>`);
        if (task.status !== 'cancelled') {
            actions.push(`<button class="btn btn-danger" onclick="window.dashboard.cancelTaskFromModal('${task.id}')"><i class="fas fa-ban"></i> –û—Ç–º–µ–Ω–∏—Ç—å</button>`);
        }
    }
    
    if (actions.length === 0) {
        return '<p class="no-actions">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</p>';
    }
    
    return `
        <h4><i class="fas fa-cogs"></i> –î–µ–π—Å—Ç–≤–∏—è</h4>
        <div class="actions-grid">
            ${actions.join('')}
        </div>
    `;
};

Dashboard.prototype.addTaskComment = function(taskId) {
    const commentText = document.getElementById('newComment')?.value?.trim();
    if (!commentText) {
        window.NotificationManager.warning('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
        return;
    }
    
    const result = window.TaskManager.addComment(taskId, commentText);
    if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const task = window.TaskManager.getTask(taskId);
        const commentsContainer = document.getElementById('commentsContainer');
        if (commentsContainer && task) {
            commentsContainer.innerHTML = this.renderComments(task.comments || []);
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('newComment').value = '';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á
        this.refreshCurrentPage();
        
        window.NotificationManager.success('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω');
    } else {
        window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
Dashboard.prototype.acceptTaskFromModal = function(taskId) {
    const result = window.TaskManager.acceptTask(taskId);
    if (result.success) {
        document.querySelector('.modal').remove();
        this.refreshCurrentPage();
        window.NotificationManager.success('–ó–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!');
    } else {
        window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
    }
};

Dashboard.prototype.completeTaskFromModal = function(taskId) {
    const result = window.TaskManager.completeTask(taskId);
    if (result.success) {
        document.querySelector('.modal').remove();
        this.refreshCurrentPage();
        window.NotificationManager.success('–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
        window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
    }
};

Dashboard.prototype.rejectTaskFromModal = function(taskId) {
    window.NotificationManager.prompt(
        '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:',
        (reason) => {
            if (!reason || reason.trim() === '') {
                window.NotificationManager.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
                return;
            }
            
            const result = window.TaskManager.rejectTask(taskId, reason);
            if (result.success) {
                document.querySelector('.modal').remove();
                this.refreshCurrentPage();
                window.NotificationManager.warning('–ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
            } else {
                window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
            }
        },
        {
            placeholder: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...',
            required: true,
            submitText: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            cancelText: '–û—Ç–º–µ–Ω–∞'
        }
    );
};

Dashboard.prototype.cancelTaskFromModal = function(taskId) {
    window.NotificationManager.confirm(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É?',
        () => {
            window.NotificationManager.prompt(
                '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã:',
                (reason) => {
                    if (!reason || reason.trim() === '') {
                        window.NotificationManager.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã');
                        return;
                    }
                    
                    const result = window.TaskManager.updateTaskStatus(taskId, 'cancelled', reason);
                    if (result.success) {
                        document.querySelector('.modal').remove();
                        this.refreshCurrentPage();
                        window.NotificationManager.info('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
                    } else {
                        window.NotificationManager.error(`–û—à–∏–±–∫–∞: ${result.message}`);
                    }
                },
                {
                    placeholder: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã...',
                    required: true,
                    submitText: '–û—Ç–º–µ–Ω–∏—Ç—å',
                    cancelText: '–ù–∞–∑–∞–¥'
                }
            );
        },
        null,
        {
            confirmText: '–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å',
            cancelText: '–ù–µ—Ç'
        }
    );
};

Dashboard.prototype.editTaskFromModal = function(taskId) {
    const task = window.TaskManager.getTask(taskId);
    document.querySelector('.modal').remove();
    this.showEditTaskModal(task);
};

Dashboard.prototype.showEditTaskModal = function(task) {
    const modal = document.createElement('div');
    modal.id = 'editTaskModal';
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É</h3>
                <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
            </div>
            <form id="editTaskForm" class="modal-form">
                <div class="form-group">
                    <label for="editTaskTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *</label>
                    <input type="text" id="editTaskTitle" value="${task.title}" required>
                </div>
                <div class="form-group">
                    <label for="editTaskDescription">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea id="editTaskDescription" rows="4">${task.description || ''}</textarea>
                </div>
                <div class="form-group">
                    <label for="editTaskAssignee">–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É *</label>
                    <select id="editTaskAssignee" required>
                        ${window.TaskManager.getAvailableAssignees().map(user => 
                            `<option value="${user.id}" ${user.id === task.assignedTo ? 'selected' : ''}>${user.name} (${user.position})</option>`
                        ).join('')}
                        ${task.assignedTo ? `<option value="${task.assignedTo}" selected>${window.usersDatabase[task.assignedTo]?.name || '–¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}</option>` : ''}
                    </select>
                </div>
                <div class="form-group">
                    <label for="editTaskPriority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                    <select id="editTaskPriority">
                        <option value="low" ${task.priority === 'low' ? 'selected' : ''}>–ù–∏–∑–∫–∏–π</option>
                        <option value="medium" ${task.priority === 'medium' ? 'selected' : ''}>–°—Ä–µ–¥–Ω–∏–π</option>
                        <option value="high" ${task.priority === 'high' ? 'selected' : ''}>–í—ã—Å–æ–∫–∏–π</option>
                        <option value="urgent" ${task.priority === 'urgent' ? 'selected' : ''}>–°—Ä–æ—á–Ω—ã–π</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editTaskDeadline">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
                    <input type="datetime-local" id="editTaskDeadline" value="${task.deadline ? new Date(task.deadline).toISOString().slice(0, 16) : ''}">
                </div>
                <div class="form-group">
                    <label for="editTaskStatus">–°—Ç–∞—Ç—É—Å</label>
                    <select id="editTaskStatus">
                        <option value="new" ${task.status === 'new' ? 'selected' : ''}>–ù–æ–≤–∞—è</option>
                        <option value="in_progress" ${task.status === 'in_progress' ? 'selected' : ''}>–í —Ä–∞–±–æ—Ç–µ</option>
                        <option value="completed" ${task.status === 'completed' ? 'selected' : ''}>–í—ã–ø–æ–ª–Ω–µ–Ω–∞</option>
                        <option value="cancelled" ${task.status === 'cancelled' ? 'selected' : ''}>–û—Ç–º–µ–Ω–µ–Ω–∞</option>
                        <option value="rejected" ${task.status === 'rejected' ? 'selected' : ''}>–û—Ç–∫–ª–æ–Ω–µ–Ω–∞</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="editComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º</label>
                    <textarea id="editComment" rows="3" placeholder="–û–ø–∏—à–∏—Ç–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="this.closest('.modal').remove()">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
                </div>
            </form>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.style.display = 'flex';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    const form = document.getElementById('editTaskForm');
    form.onsubmit = (e) => {
        e.preventDefault();
        this.updateTask(task.id);
    };
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
};

Dashboard.prototype.updateTask = function(taskId) {
    const title = document.getElementById('editTaskTitle').value.trim();
    const description = document.getElementById('editTaskDescription').value.trim();
    const assignedTo = document.getElementById('editTaskAssignee').value;
    const priority = document.getElementById('editTaskPriority').value;
    const deadline = document.getElementById('editTaskDeadline').value;
    const status = document.getElementById('editTaskStatus').value;
    const comment = document.getElementById('editComment').value.trim();
    
    if (!title || !assignedTo) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
        return;
    }
    
    const taskIndex = window.TaskManager.tasks.findIndex(t => t.id === taskId);
    if (taskIndex === -1) {
        alert('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    const oldTask = { ...window.TaskManager.tasks[taskIndex] };
    const currentUser = window.UserManager.getCurrentUser();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    window.TaskManager.tasks[taskIndex] = {
        ...window.TaskManager.tasks[taskIndex],
        title,
        description,
        assignedTo,
        priority,
        deadline: deadline || null,
        status,
        updated: new Date().toISOString()
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    let changeComment = '–ó–∞–¥–∞—á–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.';
    const changes = [];
    
    if (oldTask.title !== title) changes.push(`–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —Å "${oldTask.title}" –Ω–∞ "${title}"`);
    if (oldTask.assignedTo !== assignedTo) {
        const oldUser = window.usersDatabase[oldTask.assignedTo];
        const newUser = window.usersDatabase[assignedTo];
        changes.push(`–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω —Å "${oldUser?.name}" –Ω–∞ "${newUser?.name}"`);
    }
    if (oldTask.priority !== priority) changes.push(`–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–º–µ–Ω–µ–Ω —Å "${oldTask.priority}" –Ω–∞ "${priority}"`);
    if (oldTask.status !== status) changes.push(`—Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å "${oldTask.status}" –Ω–∞ "${status}"`);
    
    if (changes.length > 0) {
        changeComment += ' ' + changes.join(', ') + '.';
    }
    
    if (comment) {
        changeComment += ` –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
    }
    
    window.TaskManager.tasks[taskIndex].comments.push({
        text: changeComment,
        author: currentUser.id,
        timestamp: new Date().toISOString(),
        type: 'edit'
    });
    
    window.TaskManager.saveTasks();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.getElementById('editTaskModal').remove();
    this.refreshCurrentPage();
    alert('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
};

Dashboard.prototype.getDocumentTypeText = function(type) {
    const types = {
        'strategy': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
        'plan': '–ü–ª–∞–Ω',
        'analysis': '–ê–Ω–∞–ª–∏–∑',
        'finance': '–§–∏–Ω–∞–Ω—Å—ã',
        'tax': '–ù–∞–ª–æ–≥–∏',
        'clients': '–ö–ª–∏–µ–Ω—Ç—ã',
        'sales': '–ü—Ä–æ–¥–∞–∂–∏',
        'technical': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è',
        'procedure': '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞'
    };
    return types[type] || type;
};

Dashboard.prototype.showDocument = function(docId) {
    const currentUser = window.UserManager.getCurrentUser();
    const personalKB = window.personalKnowledgeBase[currentUser.id];
    
    if (!personalKB || !personalKB.documents) return;
    
    const document = personalKB.documents.find(doc => doc.id == docId);
    if (!document) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content document-modal">
            <div class="modal-header">
                <h3>${document.title}</h3>
                <span class="close" onclick="this.closest('.modal').remove()">&times;</span>
            </div>
            <div class="modal-body">
                <div class="document-meta">
                    <span class="document-type">${this.getDocumentTypeText(document.type)}</span>
                    <span class="document-date">–°–æ–∑–¥–∞–Ω: ${this.formatDate(document.created)}</span>
                </div>
                <div class="document-content">
                    <p>${document.content}</p>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    modal.style.display = 'block';
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.remove();
        }
    });
};

Dashboard.prototype.updateNotificationBadge = function() {
    const currentUser = window.UserManager.getCurrentUser();
    if (!currentUser || !window.TaskManager || !window.TaskManager.tasks) {
        return;
    }
    
    const userTasks = window.TaskManager.getTasksForUser(currentUser.id);
    const newTasksCount = userTasks.filter(task => 
        task.assignedTo === currentUser.id && task.status === 'new'
    ).length;
    
    const badge = document.getElementById('notificationCount');
    if (badge) {
        badge.textContent = newTasksCount;
        if (newTasksCount > 0) {
            badge.classList.add('show');
        } else {
            badge.classList.remove('show');
        }
    }
};

Dashboard.prototype.createTaskModal = function() {
    console.log('–°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–¥–∞—á...');
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingModal = document.getElementById('createTaskModal');
    if (existingModal) {
        existingModal.remove();
        console.log('–£–¥–∞–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'createTaskModal';
    modal.className = 'modal';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É</h3>
                <span class="close" id="closeCreateTaskModal">&times;</span>
            </div>
            <form id="createTaskForm" class="modal-form">
                <div class="form-group">
                    <label for="taskTitle">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ *</label>
                    <input type="text" id="taskTitle" required placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏">
                </div>
                <div class="form-group">
                    <label for="taskDescription">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea id="taskDescription" rows="4" placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"></textarea>
                </div>
                <div class="form-group">
                    <label for="taskAssignee">–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É *</label>
                    <select id="taskAssignee" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</option>
                        ${window.TaskManager.getAvailableAssignees().map(user => 
                            `<option value="${user.id}">${user.name} (${user.position})</option>`
                        ).join('')}
                    </select>
                </div>
                <div class="form-group">
                    <label for="taskPriority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                    <select id="taskPriority">
                        <option value="low">–ù–∏–∑–∫–∏–π</option>
                        <option value="medium" selected>–°—Ä–µ–¥–Ω–∏–π</option>
                        <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                        <option value="urgent">–°—Ä–æ—á–Ω—ã–π</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="taskDeadline">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
                    <input type="datetime-local" id="taskDeadline">
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" id="cancelCreateTask">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</button>
                </div>
            </form>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ body
    document.body.appendChild(modal);
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ DOM');
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setTimeout(() => {
        const closeBtn = document.getElementById('closeCreateTaskModal');
        const cancelBtn = document.getElementById('cancelCreateTask');
        const form = document.getElementById('createTaskForm');
        
        if (closeBtn) {
            closeBtn.onclick = () => this.hideCreateTaskModal();
            console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω');
        }
        
        if (cancelBtn) {
            cancelBtn.onclick = () => this.hideCreateTaskModal();
            console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏–≤—è–∑–∞–Ω');
        }
        
        if (form) {
            form.onsubmit = (e) => {
                e.preventDefault();
                this.createTask();
            };
            console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –ø—Ä–∏–≤—è–∑–∞–Ω');
        }
    }, 100);
    
    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ DOM');
};

// ============= –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø UX =============

// –ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º
Dashboard.prototype.initTaskSearch = function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!document.getElementById('taskSearchInput')) {
        const searchHtml = `
            <div class="task-search">
                <input type="text" id="taskSearchInput" placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..." class="form-control">
                <button id="clearSearch" class="btn btn-ghost btn-sm">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        
        const tasksFilters = document.querySelector('.tasks-filters');
        if (tasksFilters) {
            tasksFilters.insertAdjacentHTML('beforebegin', searchHtml);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
            document.getElementById('taskSearchInput').addEventListener('input', (e) => {
                this.searchTasks(e.target.value);
            });
            
            document.getElementById('clearSearch').addEventListener('click', () => {
                document.getElementById('taskSearchInput').value = '';
                this.searchTasks('');
            });
        }
    }
};

Dashboard.prototype.searchTasks = function(query) {
    const activeGrid = document.querySelector('.tab-content.active .tasks-grid');
    if (!activeGrid) return;
    
    const taskCards = activeGrid.querySelectorAll('.task-card');
    const searchLower = query.toLowerCase();
    
    let visibleCount = 0;
    
    taskCards.forEach(card => {
        const title = card.querySelector('h3')?.textContent.toLowerCase() || '';
        const description = card.querySelector('.task-description p')?.textContent.toLowerCase() || '';
        const assigneeText = card.querySelector('.task-info p')?.textContent.toLowerCase() || '';
        
        const matches = title.includes(searchLower) || 
                       description.includes(searchLower) || 
                       assigneeText.includes(searchLower);
        
        if (matches || query === '') {
            card.style.display = 'block';
            visibleCount++;
        } else {
            card.style.display = 'none';
        }
    });
    
    this.updateSearchResults(visibleCount, taskCards.length);
};

Dashboard.prototype.updateSearchResults = function(visible, total) {
    const activeTabButton = document.querySelector('.tab-btn.active');
    if (activeTabButton && visible !== total) {
        const originalText = activeTabButton.textContent.split(' (')[0];
        activeTabButton.textContent = `${originalText} (${visible}/${total})`;
    }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
Dashboard.prototype.checkOverdueTasks = function() {
    const currentUser = window.UserManager.getCurrentUser();
    const userTasks = window.TaskManager.getTasksForUser(currentUser.id);
    const now = new Date();
    
    const overdueTasks = userTasks.filter(task => 
        task.deadline && 
        new Date(task.deadline) < now && 
        task.status !== 'completed' && 
        task.status !== 'cancelled'
    );
    
    if (overdueTasks.length > 0) {
        const message = overdueTasks.length === 1 
            ? `–£ –≤–∞—Å 1 –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: "${overdueTasks[0].title}"` 
            : `–£ –≤–∞—Å ${overdueTasks.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`;
            
        window.NotificationManager.warning(message, 8000);
    }
};

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∑–∞–¥–∞—á–∏
Dashboard.prototype.saveDraftTask = function() {
    const form = document.getElementById('createTaskForm');
    if (!form) return;
    
    const formData = new FormData(form);
    const draft = {};
    
    for (let [key, value] of formData.entries()) {
        draft[key] = value;
    }
    
    localStorage.setItem('taskDraft', JSON.stringify(draft));
};

Dashboard.prototype.loadDraftTask = function() {
    const draft = localStorage.getItem('taskDraft');
    if (!draft) return;
    
    try {
        const draftData = JSON.parse(draft);
        const form = document.getElementById('createTaskForm');
        if (!form) return;
        
        Object.keys(draftData).forEach(key => {
            const field = form.querySelector(`[name="${key}"]`);
            if (field) {
                field.value = draftData[key];
            }
        });
        
        window.NotificationManager.info('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–¥–∞—á–∏');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', error);
    }
};

Dashboard.prototype.clearDraftTask = function() {
    localStorage.removeItem('taskDraft');
};

// –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á
Dashboard.prototype.exportTasks = function() {
    const currentUser = window.UserManager.getCurrentUser();
    const tasks = currentUser.canViewAll ? 
        window.TaskManager.getAllTasks() : 
        window.TaskManager.getTasksForUser(currentUser.id);
    
    const csvContent = this.tasksToCSV(tasks);
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    
    if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `tasks_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        window.NotificationManager.success('–ó–∞–¥–∞—á–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV');
    }
};

Dashboard.prototype.tasksToCSV = function(tasks) {
    const headers = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–°—Ç–∞—Ç—É—Å', '–°–æ–∑–¥–∞–Ω–∞', '–°—Ä–æ–∫', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'];
    const rows = tasks.map(task => [
        task.id,
        task.title,
        task.description || '',
        window.usersDatabase[task.assignedTo]?.name || '',
        window.usersDatabase[task.assignedBy]?.name || '',
        this.getPriorityText(task.priority),
        this.getStatusText(task.status),
        this.formatDate(task.created),
        task.deadline ? this.formatDate(task.deadline) : '',
        task.completedAt ? this.formatDate(task.completedAt) : ''
    ]);
    
    return [headers, ...rows]
        .map(row => row.map(field => `"${String(field).replace(/"/g, '""')}"`).join(','))
        .join('\n');
};

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
Dashboard.prototype.initHotkeys = function() {
    document.addEventListener('keydown', (e) => {
        if (this.currentPage !== 'tasks') return;
        
        // Ctrl/Cmd + N - –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
            e.preventDefault();
            this.showCreateTaskModal();
        }
        
        // Ctrl/Cmd + R - –æ–±–Ω–æ–≤–∏—Ç—å
        if ((e.ctrlKey || e.metaKey) && e.key === 'r') {
            e.preventDefault();
            this.refreshTasksPage();
        }
        
        // Ctrl/Cmd + F - –ø–æ–∏—Å–∫
        if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
            e.preventDefault();
            const searchInput = document.getElementById('taskSearchInput');
            if (searchInput) {
                searchInput.focus();
            }
        }
        
        // Escape - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        if (e.key === 'Escape') {
            const modal = document.querySelector('.modal');
            if (modal) {
                modal.remove();
            }
        }
    });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
Dashboard.prototype.initTaskEnhancements = function() {
    if (this.currentPage === 'tasks') {
        setTimeout(() => {
            this.initTaskSearch();
            this.checkOverdueTasks();
            this.initHotkeys();
        }, 500);
    }
};
